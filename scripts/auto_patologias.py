"""
AUTOMA√á√ÉO PARA CADASTRO DE PATOLOGIAS VETERIN√ÅRIAS
==================================================

Este script automatiza o cadastro em massa de patologias no sistema Simples.vet,
simulando as a√ß√µes que um usu√°rio humano faria manualmente no navegador.

Desenvolvido por: TAE Augusto Daniel Alves Serpa (SIAPE: 3125396)
Em colabora√ß√£o com: TAE Veterin√°ria Fabiana Wurster Strey (SIAPE: 2055298)
Institui√ß√£o: Hospital Universit√°rio Veterin√°rio - Unipampa
Data: Agosto/2025

FUNCIONAMENTO:
1. L√™ lista de patologias de um arquivo texto
2. Acessa automaticamente o sistema Simples.vet
3. Cadastra cada patologia sequencialmente
4. Controla duplicatas e trata erros
5. Registra progresso em arquivo de log
"""

# =====================================================
# IMPORTA√á√ÉO DAS BIBLIOTECAS NECESS√ÅRIAS
# =====================================================

from selenium import webdriver  # Biblioteca para controlar o navegador automaticamente
from selenium.webdriver.common.by import By  # Para localizar elementos na p√°gina web
from selenium.webdriver.chrome.service import Service  # Para gerenciar o driver do Chrome
from selenium.webdriver.support.ui import WebDriverWait  # Para aguardar elementos carregarem
from selenium.webdriver.support import expected_conditions as EC  # Condi√ß√µes de espera
from webdriver_manager.chrome import ChromeDriverManager  # Gerencia automaticamente o driver do Chrome
import time  # Para pausas durante a execu√ß√£o
import os   # Para verificar se arquivos existem

# =====================================================
# CONFIGURA√á√ïES PRINCIPAIS DO SISTEMA
# =====================================================

# Localiza√ß√£o dos arquivos de dados
CAMINHO_PATOLOGIAS = "../data/patologias.txt"  # Arquivo com lista de patologias para cadastrar
CAMINHO_CADASTRADAS = "../data/cadastradas.txt"  # Arquivo que registra patologias j√° processadas

# Quantidade de patologias processadas por vez (evita sobrecarregar o sistema)
TAMANHO_LOTE = 40

# Credenciais de acesso ao sistema (ATEN√á√ÉO: manter seguras!)
EMAIL_USUARIO = "USU√ÅRIO AQUI"
SENHA_USUARIO = "SENHA AQUI"

# URLs do sistema Simples.vet
URL_LOGIN = "https://app.simples.vet/login/login.php"
URL_PATOLOGIAS = "https://app.simples.vet/v3/veterinaria/patologias"

# =====================================================
# LEITURA E PREPARA√á√ÉO DOS DADOS
# =====================================================

print("üîÑ Iniciando prepara√ß√£o dos dados...")

# L√™ todas as patologias do arquivo principal
print(f"üìñ Lendo arquivo: {CAMINHO_PATOLOGIAS}")
with open(CAMINHO_PATOLOGIAS, "r", encoding="utf-8") as arquivo:
    todas_patologias = [linha.strip() for linha in arquivo if linha.strip()]

print(f"‚úÖ Total de patologias encontradas: {len(todas_patologias)}")

# Verifica quais patologias j√° foram cadastradas anteriormente
patologias_ja_cadastradas = set()
if os.path.exists(CAMINHO_CADASTRADAS):
    print(f"üìã Verificando patologias j√° cadastradas...")
    with open(CAMINHO_CADASTRADAS, "r", encoding="utf-8") as arquivo:
        patologias_ja_cadastradas = set(linha.strip() for linha in arquivo if linha.strip())
    print(f"‚ö†Ô∏è  Patologias j√° processadas: {len(patologias_ja_cadastradas)}")

# Remove patologias j√° cadastradas da lista de processamento
novas_patologias = [p for p in todas_patologias if p not in patologias_ja_cadastradas]
print(f"üÜï Novas patologias para cadastrar: {len(novas_patologias)}")

# Se n√£o h√° nada novo para processar, encerra o programa
if not novas_patologias:
    print("‚úÖ Todas as patologias j√° foram cadastradas!")
    exit()

# =====================================================
# DIVIS√ÉO EM LOTES PARA PROCESSAMENTO SEGURO
# =====================================================

# Divide a lista em grupos menores para evitar sobrecarregar o sistema
lotes = []
for i in range(0, len(novas_patologias), TAMANHO_LOTE):
    lote = novas_patologias[i:i+TAMANHO_LOTE]
    lotes.append(lote)

print(f"üì¶ Dados organizados em {len(lotes)} lotes de at√© {TAMANHO_LOTE} patologias")

# =====================================================
# CONFIGURA√á√ÉO E INICIALIZA√á√ÉO DO NAVEGADOR
# =====================================================

print("üåê Iniciando navegador...")

# Configura o Chrome para funcionar de forma otimizada
opcoes_chrome = webdriver.ChromeOptions()
opcoes_chrome.add_argument("--disable-blink-features=AutomationControlled")  # Evita detec√ß√£o de bot
opcoes_chrome.add_experimental_option("excludeSwitches", ["enable-automation"])

# Inicializa o navegador Chrome
driver = webdriver.Chrome(
    service=Service(ChromeDriverManager().install()),
    options=opcoes_chrome
)

# Maximiza a janela para melhor visualiza√ß√£o
driver.maximize_window()

# Configura tempo limite para esperas
wait = WebDriverWait(driver, 10)

# =====================================================
# PROCESSO DE LOGIN NO SISTEMA
# =====================================================

try:
    print("üîê Realizando login no sistema...")
    
    # Navega para a p√°gina de login
    driver.get(URL_LOGIN)
    
    # Localiza e preenche o campo de email
    campo_email = wait.until(EC.presence_of_element_located((By.ID, "l_usu_var_email")))
    campo_email.send_keys(EMAIL_USUARIO)
    
    # Localiza e preenche o campo de senha
    campo_senha = driver.find_element(By.ID, "l_usu_var_senha")
    campo_senha.send_keys(SENHA_USUARIO)
    
    # Clica no bot√£o de login
    botao_login = driver.find_element(By.ID, "btn_login")
    botao_login.click()
    
    # Aguarda o login ser processado
    time.sleep(5)
    print("‚úÖ Login realizado com sucesso!")

    # =====================================================
    # PROCESSAMENTO DOS LOTES DE PATOLOGIAS
    # =====================================================

    # Processa cada lote sequencialmente
    for numero_lote, lote_atual in enumerate(lotes, start=1):
        print(f"\nüöÄ Processando lote {numero_lote}/{len(lotes)} ({len(lote_atual)} patologias)")
        
        # Processa cada patologia do lote atual
        for nome_patologia in lote_atual:
            try:
                print(f"  ü©∫ Cadastrando: {nome_patologia}")
                
                # =====================================================
                # NAVEGA√á√ÉO PARA A P√ÅGINA DE PATOLOGIAS
                # =====================================================
                
                # Vai para a p√°gina principal de patologias
                driver.get(URL_PATOLOGIAS)
                
                # =====================================================
                # ABERTURA DO FORMUL√ÅRIO DE NOVA PATOLOGIA
                # =====================================================
                
                # Procura e clica no bot√£o "+" para adicionar nova patologia
                # O bot√£o √© identificado pelo √≠cone SVG de "adicionar"
                botao_adicionar = WebDriverWait(driver, 15).until(
                    EC.visibility_of_element_located((
                        By.XPATH,
                        "//i[contains(@style, 'add.svg')]/ancestor::*[self::button or self::a or self::div][1]"
                    ))
                )
                
                # Pequena pausa para garantir que o elemento est√° pronto
                time.sleep(1)
                botao_adicionar.click()
                
                # =====================================================
                # PREENCHIMENTO DO FORMUL√ÅRIO
                # =====================================================
                
                # Localiza o campo "Nome" no formul√°rio
                campo_nome = WebDriverWait(driver, 10).until(
                    EC.element_to_be_clickable((By.XPATH, "//input[@name='nome' and @placeholder='Nome*']"))
                )
                
                # Aguarda um pouco para garantir que o campo est√° pronto
                time.sleep(0.5)
                
                # Limpa qualquer conte√∫do anterior e digita o nome da patologia
                campo_nome.clear()
                campo_nome.send_keys(nome_patologia)
                
                # =====================================================
                # SALVAMENTO DO REGISTRO
                # =====================================================
                
                # Localiza e clica no bot√£o "Salvar"
                botao_salvar = wait.until(
                    EC.element_to_be_clickable((By.XPATH, "//button[contains(@class, 'sv-botao--salvar')]"))
                )
                botao_salvar.click()
                
                # Aguarda o processamento do salvamento
                time.sleep(3)
                
                # =====================================================
                # VERIFICA√á√ÉO DE SUCESSO
                # =====================================================
                
                # Verifica se voltou para a p√°gina de listagem (indica sucesso)
                if not driver.current_url.endswith("/veterinaria/patologias"):
                    print("    ‚ö†Ô∏è  Poss√≠vel duplicata ou erro, mas registrando...")
                    # For√ßa retorno √† p√°gina principal
                    driver.get(URL_PATOLOGIAS)
                    time.sleep(2)
                
                # =====================================================
                # REGISTRO DE PROGRESSO
                # =====================================================
                
                # Salva a patologia como processada (para controle de duplicatas)
                with open(CAMINHO_CADASTRADAS, "a", encoding="utf-8") as arquivo_log:
                    arquivo_log.write(nome_patologia + "\n")
                
                print("    ‚úÖ Cadastrada com sucesso!")
                
            except Exception as erro:
                # =====================================================
                # TRATAMENTO DE ERROS
                # =====================================================
                
                print(f"    ‚ùå Erro ao cadastrar '{nome_patologia}': {erro}")
                
                # Tenta voltar √† p√°gina principal em caso de erro
                try:
                    driver.get(URL_PATOLOGIAS)
                    time.sleep(2)
                except:
                    print("    ‚ö†Ô∏è  Erro ao retornar √† p√°gina principal")
        
        # =====================================================
        # PAUSA ENTRE LOTES
        # =====================================================
        
        print(f"‚úÖ Lote {numero_lote} finalizado!")
        
        # Pausa entre lotes para n√£o sobrecarregar o sistema
        if numero_lote < len(lotes):  # N√£o pausa ap√≥s o √∫ltimo lote
            print("‚è∏Ô∏è  Aguardando antes do pr√≥ximo lote...")
            time.sleep(5)
    
    # =====================================================
    # FINALIZA√á√ÉO DO PROCESSO
    # =====================================================
    
    print("\nüéâ PROCESSO CONCLU√çDO COM SUCESSO!")
    print(f"üìä Total de patologias processadas: {len(novas_patologias)}")
    print(f"üì¶ Lotes processados: {len(lotes)}")
    
    # Aguarda input do usu√°rio antes de fechar
    input("\nPressione Enter para finalizar...")

except Exception as erro_geral:
    # =====================================================
    # TRATAMENTO DE ERROS GERAIS
    # =====================================================
    
    print(f"‚ùå ERRO CR√çTICO: {erro_geral}")
    print("üîß Verifique:")
    print("   - Conex√£o com a internet")
    print("   - Credenciais de login")
    print("   - Disponibilidade do sistema Simples.vet")
    
finally:
    # =====================================================
    # LIMPEZA E ENCERRAMENTO
    # =====================================================
    
    print("üßπ Encerrando navegador...")
    driver.quit()  # Fecha o navegador e libera recursos
    print("‚úÖ Programa finalizado!")

# =====================================================
# INFORMA√á√ïES ADICIONAIS PARA USU√ÅRIOS
# =====================================================

"""
COMO USAR ESTE SCRIPT:
=====================

1. PREPARA√á√ÉO DOS ARQUIVOS:
   - Crie o arquivo 'patologias.txt' com uma patologia por linha
   - O arquivo 'cadastradas.txt' ser√° criado automaticamente

2. INSTALA√á√ÉO DAS DEPEND√äNCIAS:
   pip install selenium webdriver-manager

3. CONFIGURA√á√ÉO:
   - Ajuste as credenciais de login (EMAIL_USUARIO, SENHA_USUARIO)
   - Verifique os caminhos dos arquivos (CAMINHO_PATOLOGIAS, CAMINHO_CADASTRADAS)

4. EXECU√á√ÉO:
   python automacao_patologias.py

RECURSOS DE SEGURAN√áA:
=====================

- Processa em lotes pequenos (40 por vez)
- Controla duplicatas automaticamente
- Pausa entre opera√ß√µes para n√£o sobrecarregar o sistema
- Salva progresso continuamente
- Trata erros sem interromper o processo
- Permite recupera√ß√£o em caso de falha

MONITORAMENTO:
=============

- Acompanhe as mensagens no console
- Verifique o arquivo 'cadastradas.txt' para ver o progresso
- Em caso de erro, o script continua com as pr√≥ximas patologias

SUPORTE:
========

Para d√∫vidas ou melhorias, entre em contato:
- Email: augustoserpa@unipampa.edu.br
- GitHub: https://github.com/augustoserpa/autopatologias
"""
